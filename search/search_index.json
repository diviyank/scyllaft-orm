{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"scylla-bridge","text":"<p>Documentation available here</p> <p>A simple interface over ScyllaFT or ScyllaPy.</p>"},{"location":"#create-all-tables-and-views","title":"Create all tables and views","text":"<p>To create them, you must import them and then use the <code>MetaData</code> class:</p> <pre><code>from scylla_bridge import MetaData\nm = MetaData()\nawait m.create_all()\n</code></pre>"},{"location":"columns/","title":"Column","text":""},{"location":"columns/#scylla_bridge.column.Column","title":"scylla_bridge.column.Column","text":"<p>Represents a column in a ScyllaDB query.</p> <p>Parameters:</p> Name Type Description Default <code>_expr</code> <code>Optional[ColumnExpr]</code> <p>The column expression associated with the column, by default None.</p> required <code>_table</code> <code>Optional[str]</code> <p>The name of the table, by default None.</p> required <code>_keyspace</code> <code>Optional[str]</code> <p>The name of the keyspace, by default None.</p> required <code>_name</code> <code>Optional[str]</code> <p>The name of the column, by default None.</p> required <code>rename</code> <code>Optional[str]</code> <p>An alias for the column, by default None.</p> required"},{"location":"columns/#scylla_bridge.column.Column.rename","title":"rename  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rename = None\n</code></pre>"},{"location":"columns/#scylla_bridge.column.Column.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type\n</code></pre>"},{"location":"columns/#scylla_bridge.column.Column.in_","title":"in_","text":"<pre><code>in_(value)\n</code></pre> <p>Creates a column expression for an \"IN\" comparison.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Iterable</code> <p>An iterable containing the values to compare against the column.</p> required <p>Returns:</p> Type Description <code>ColumnExpr</code> <p>The column expression representing the \"IN\" comparison.</p> Source code in <code>scylla_bridge/column.py</code> <pre><code>@validate_call\ndef in_(self, value: Iterable) -&gt; ColumnExpr:\n    \"\"\"Creates a column expression for an \"IN\" comparison.\n\n    Parameters\n    ----------\n    value : Iterable\n        An iterable containing the values to compare against the column.\n\n    Returns\n    -------\n    ColumnExpr\n        The column expression representing the \"IN\" comparison.\n    \"\"\"\n    assert (\n        self._name is not None\n        and self._table is not None\n        and self._keyspace is not None\n    ), \"Column name is not set!\"\n    return ColumnExpr(self._table, self._name, self._keyspace, \" IN \", value)\n</code></pre>"},{"location":"columns/#scylla_bridge.column.Column.label","title":"label","text":"<pre><code>label(name)\n</code></pre> <p>Assigns an alias to the column.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The new alias for the column.</p> required <p>Returns:</p> Type Description <code>Column</code> <p>The updated column with the new alias.</p> Source code in <code>scylla_bridge/column.py</code> <pre><code>@validate_call\ndef label(self, name: str) -&gt; Column:\n    \"\"\"Assigns an alias to the column.\n\n    Parameters\n    ----------\n    name : str\n        The new alias for the column.\n\n    Returns\n    -------\n    Column\n        The updated column with the new alias.\n    \"\"\"\n    self.rename = name\n    return self\n</code></pre>"},{"location":"columns/#scylla_bridge.column.Column.mean","title":"mean","text":"<pre><code>mean()\n</code></pre> <p>Creates an aggregate expression for the AVG (mean) function.</p> <p>Returns:</p> Type Description <code>AggregateExpr</code> <p>The aggregate expression representing the AVG function.</p> Source code in <code>scylla_bridge/column.py</code> <pre><code>def mean(self) -&gt; AggregateExpr:\n    \"\"\"Creates an aggregate expression for the AVG (mean) function.\n\n    Returns\n    -------\n    AggregateExpr\n        The aggregate expression representing the AVG function.\n    \"\"\"\n    assert (\n        self._name is not None\n        and self._table is not None\n        and self._keyspace is not None\n    ), \"Column name is not set!\"\n    return AggregateExpr(\n        self._table, self._name, self._keyspace, \"AVG\", self.rename\n    )\n</code></pre>"},{"location":"columns/#scylla_bridge.column.Column.set_attributes","title":"set_attributes","text":"<pre><code>set_attributes(settings)\n</code></pre> <p>Sets multiple attributes of the column.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict</code> <p>A dictionary where the keys are attribute names and the values are the values to set.</p> required <p>Returns:</p> Type Description <code>Column</code> <p>The updated column with new attributes.</p> Source code in <code>scylla_bridge/column.py</code> <pre><code>def set_attributes(self, settings: dict) -&gt; Column:\n    \"\"\"Sets multiple attributes of the column.\n\n    Parameters\n    ----------\n    settings : dict\n        A dictionary where the keys are attribute names and the values are the values to set.\n\n    Returns\n    -------\n    Column\n        The updated column with new attributes.\n    \"\"\"\n    for key, value in settings.items():\n        setattr(self, key, value)\n    return self\n</code></pre>"},{"location":"columns/#scylla_bridge.column.Column.sum","title":"sum","text":"<pre><code>sum()\n</code></pre> <p>Creates an aggregate expression for the SUM function.</p> <p>Returns:</p> Type Description <code>AggregateExpr</code> <p>The aggregate expression representing the SUM function.</p> Source code in <code>scylla_bridge/column.py</code> <pre><code>def sum(self) -&gt; AggregateExpr:\n    \"\"\"Creates an aggregate expression for the SUM function.\n\n    Returns\n    -------\n    AggregateExpr\n        The aggregate expression representing the SUM function.\n    \"\"\"\n    assert (\n        self._name is not None\n        and self._table is not None\n        and self._keyspace is not None\n    ), \"Column name is not set!\"\n    return AggregateExpr(\n        self._table, self._name, self._keyspace, \"SUM\", self.rename\n    )\n</code></pre>"},{"location":"columns/#column-expressions","title":"Column Expressions","text":""},{"location":"columns/#columnexpr","title":"ColumnExpr","text":""},{"location":"columns/#scylla_bridge.column.ColumnExpr","title":"scylla_bridge.column.ColumnExpr","text":"<p>Represents a column expression in a ScyllaDB query.</p> <p>Parameters:</p> Name Type Description Default <code>_table</code> <code>str</code> <p>The name of the table.</p> required <code>_name</code> <code>str</code> <p>The name of the column.</p> required <code>_keyspace</code> <code>str</code> <p>The name of the keyspace.</p> required <code>operator</code> <code>str</code> <p>The comparison operator used in the expression (e.g., '=', '&lt;', '&gt;', etc.).</p> required <code>value</code> <code>Any</code> <p>The value against which the column is being compared.</p> required"},{"location":"columns/#scylla_bridge.column.ColumnExpr.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator\n</code></pre>"},{"location":"columns/#scylla_bridge.column.ColumnExpr.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value\n</code></pre>"},{"location":"columns/#aggregateexpr","title":"AggregateExpr","text":""},{"location":"columns/#scylla_bridge.column.AggregateExpr","title":"scylla_bridge.column.AggregateExpr","text":"<p>Represents an aggregate column expression in a ScyllaDB query.</p> <p>Parameters:</p> Name Type Description Default <code>_table</code> <code>str</code> <p>The name of the table.</p> required <code>_name</code> <code>str</code> <p>The name of the column.</p> required <code>_keyspace</code> <code>str</code> <p>The name of the keyspace.</p> required <code>operator</code> <code>str</code> <p>The aggregate function applied to the column (e.g., 'SUM', 'AVG').</p> required <code>rename</code> <code>Optional[str]</code> <p>An alias for the column, by default None.</p> required"},{"location":"columns/#scylla_bridge.column.AggregateExpr.operator","title":"operator  <code>instance-attribute</code>","text":"<pre><code>operator\n</code></pre>"},{"location":"columns/#scylla_bridge.column.AggregateExpr.rename","title":"rename  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rename = None\n</code></pre>"},{"location":"columns/#scylla_bridge.column.AggregateExpr.label","title":"label","text":"<pre><code>label(name)\n</code></pre> <p>Assigns an alias to the aggregate expression.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The new alias for the column.</p> required <p>Returns:</p> Type Description <code>AggregateExpr</code> <p>The updated aggregate expression with the new alias.</p> Source code in <code>scylla_bridge/column.py</code> <pre><code>@validate_call\ndef label(self, name: str) -&gt; AggregateExpr:\n    \"\"\"Assigns an alias to the aggregate expression.\n\n    Parameters\n    ----------\n    name : str\n        The new alias for the column.\n\n    Returns\n    -------\n    AggregateExpr\n        The updated aggregate expression with the new alias.\n    \"\"\"\n    self.rename = name\n    return self\n</code></pre>"},{"location":"queries/","title":"Queries","text":""},{"location":"queries/#query","title":"Query","text":""},{"location":"queries/#scylla_bridge.query.Query","title":"scylla_bridge.query.Query","text":"<p>               Bases: <code>ABC</code></p> <p>Generic query expression.</p>"},{"location":"queries/#scylla_bridge.query.Query.build_query","title":"build_query  <code>abstractmethod</code>","text":"<pre><code>build_query()\n</code></pre> <p>Builds the query into a string and its parameters as a list.</p> <p>Returns:</p> Type Description <code>Tuple[str, List[Any]]</code> <p>The query string and the corresponding parameters.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@abstractmethod\ndef build_query(self) -&gt; Tuple[str, List[Any]]:\n    \"\"\"Builds the query into a string and its parameters as a list.\n\n    Returns\n    -------\n    Tuple[str, List[Any]]\n        The query string and the corresponding parameters.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Query.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(scylla_instance)\n</code></pre> <p>Executes the query using a Scylla instance.</p> <p>Parameters:</p> Name Type Description Default <code>scylla_instance</code> <code>Scylla</code> <p>The Scylla instance used to execute the query.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result of the executed query.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>async def execute(self, scylla_instance: Scylla) -&gt; Any:\n    \"\"\"Executes the query using a Scylla instance.\n\n    Parameters\n    ----------\n    scylla_instance : Scylla\n        The Scylla instance used to execute the query.\n\n    Returns\n    -------\n    Any\n        The result of the executed query.\n    \"\"\"\n    query, parameters = self.build_query()\n    result = await scylla_instance.execute(query, parameters)\n    return result\n</code></pre>"},{"location":"queries/#select","title":"Select","text":""},{"location":"queries/#scylla_bridge.query.Select","title":"scylla_bridge.query.Select","text":"<pre><code>Select(*columns)\n</code></pre> <p>               Bases: <code>Query</code></p> <p>Select query from Scylla.</p> <p>Initializes the Select query.</p> <p>Parameters:</p> Name Type Description Default <code>*columns</code> <code>Column or AggregateExpr or Type[Table]</code> <p>The columns to be selected in the query.</p> <code>()</code> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call(config=ConfigDict(arbitrary_types_allowed=True))\ndef __init__(self, *columns: Column | AggregateExpr | Type[Table]) -&gt; None:\n    \"\"\"Initializes the Select query.\n\n    Parameters\n    ----------\n    *columns : Column or AggregateExpr or Type[Table]\n        The columns to be selected in the query.\n    \"\"\"\n    assert len(columns) &gt; 0, \"Select expression cannot be empty!\"\n\n    if inspect.isclass(columns[0]) and issubclass(columns[0], Table):\n        self._table = columns[0].__tablename__\n        self._keyspace = columns[0].__keyspace__\n        self._select = \"*\"\n        self._columns: List[Column | AggregateExpr] = []\n    else:\n        self._table: str = columns[0]._table  # type:ignore\n        self._keyspace: str = columns[0]._keyspace  # type:ignore\n        assert all(\n            [\n                isinstance(col, (Column, AggregateExpr))\n                and (col._table == self._table)\n                and (col._keyspace == self._keyspace)\n                for col in columns\n            ]\n        ), \"Columns do not originate from the same table or is invalid\"\n        self._select = \", \".join(\n            [\n                (\n                    f\"{col._name}{f' AS {col.rename}' if col.rename is not None else ''}\"\n                    if isinstance(col, Column)\n                    else f\"{col.operator}({col._name}){f' AS {col.rename}' if col.rename is not None else ''}\"  # type:ignore\n                )\n                for col in columns\n            ]\n        )\n        self._columns = columns  # type:ignore\n\n    self._where: List[ColumnExpr] = []\n    self._allow_filtering: bool = False\n    self._limit: int = 0\n    self._distinct: bool = False\n    self._group_by: Optional[str] = None\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Select.allow_filtering","title":"allow_filtering","text":"<pre><code>allow_filtering()\n</code></pre> <p>Enables the 'ALLOW FILTERING' option in the query.</p> <p>Returns:</p> Type Description <code>Select</code> <p>The updated Select query with 'ALLOW FILTERING' enabled.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>def allow_filtering(self) -&gt; Select:\n    \"\"\"Enables the 'ALLOW FILTERING' option in the query.\n\n    Returns\n    -------\n    Select\n        The updated Select query with 'ALLOW FILTERING' enabled.\n    \"\"\"\n    logger.warning(\n        \"Allow filtering usually leads to degraded performance. Consider reviewing your query.\"\n    )\n    self._allow_filtering = True\n    return self\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Select.build_query","title":"build_query","text":"<pre><code>build_query()\n</code></pre> <p>Builds the SELECT query into a string and its parameters.</p> <p>Returns:</p> Type Description <code>Tuple[str, List[Any]]</code> <p>The query string and the corresponding parameters.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>def build_query(self) -&gt; Tuple[str, List[Any]]:\n    \"\"\"Builds the SELECT query into a string and its parameters.\n\n    Returns\n    -------\n    Tuple[str, List[Any]]\n        The query string and the corresponding parameters.\n    \"\"\"\n    query = f\"SELECT {'DISTINCT' if self.distinct else ''} {self._select} FROM {self._keyspace}.{self._table}\"\n    parameters = []\n    if self._where:\n        predicates = []\n        for predicate in self._where:\n            predicates.append(f\"{predicate._name} {predicate.operator} ?\")\n            parameters.append(predicate.value)\n        query = f\"{query} WHERE {' AND '.join(predicates)}\"\n    if self._group_by:\n        query = f\"{query} GROUP BY {self._group_by}\"\n    if self._limit:\n        query = f\"{query} LIMIT {self._limit}\"\n    if self._allow_filtering:\n        query = f\"{query} ALLOW FILTERING\"\n    return query, parameters\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Select.distinct","title":"distinct","text":"<pre><code>distinct()\n</code></pre> <p>Enables the DISTINCT option in the query.</p> <p>Returns:</p> Type Description <code>Select</code> <p>The updated Select query with DISTINCT enabled.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>def distinct(self) -&gt; Select:\n    \"\"\"Enables the DISTINCT option in the query.\n\n    Returns\n    -------\n    Select\n        The updated Select query with DISTINCT enabled.\n    \"\"\"\n    self._distinct = True\n    return self\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Select.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(scylla_instance)\n</code></pre> <p>Executes the query using a Scylla instance.</p> <p>Parameters:</p> Name Type Description Default <code>scylla_instance</code> <code>Scylla</code> <p>The Scylla instance used to execute the query.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result of the executed query.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>async def execute(self, scylla_instance: Scylla) -&gt; Any:\n    \"\"\"Executes the query using a Scylla instance.\n\n    Parameters\n    ----------\n    scylla_instance : Scylla\n        The Scylla instance used to execute the query.\n\n    Returns\n    -------\n    Any\n        The result of the executed query.\n    \"\"\"\n    query, parameters = self.build_query()\n    result = await scylla_instance.execute(query, parameters)\n    return result\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Select.group_by","title":"group_by","text":"<pre><code>group_by(*columns)\n</code></pre> <p>Adds GROUP BY conditions to the query.</p> <p>Parameters:</p> Name Type Description Default <code>*columns</code> <code>Column</code> <p>The columns to group by in the query.</p> <code>()</code> <p>Returns:</p> Type Description <code>Select</code> <p>The updated Select query with GROUP BY conditions.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call\ndef group_by(self, *columns: Column) -&gt; Select:\n    \"\"\"Adds GROUP BY conditions to the query.\n\n    Parameters\n    ----------\n    *columns : Column\n        The columns to group by in the query.\n\n    Returns\n    -------\n    Select\n        The updated Select query with GROUP BY conditions.\n    \"\"\"\n    assert len(columns) &gt; 0, \"group_by condition cannot be empty!\"\n    assert all(\n        [\n            (col._table == self._table) and (col._keyspace == self._keyspace)\n            for col in columns\n        ]\n    ), \"Columns do not originate from the same table\"\n    self._group_by = \", \".join([str(column._name) for column in columns])\n    return self\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Select.limit","title":"limit","text":"<pre><code>limit(_limit)\n</code></pre> <p>Sets a limit on the number of rows returned by the query.</p> <p>Parameters:</p> Name Type Description Default <code>_limit</code> <code>int</code> <p>The maximum number of rows to return.</p> required <p>Returns:</p> Type Description <code>Select</code> <p>The updated Select query with a limit.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call\ndef limit(self, _limit: int) -&gt; Select:\n    \"\"\"Sets a limit on the number of rows returned by the query.\n\n    Parameters\n    ----------\n    _limit : int\n        The maximum number of rows to return.\n\n    Returns\n    -------\n    Select\n        The updated Select query with a limit.\n    \"\"\"\n    assert _limit &gt; 0, \"Limit cannot be null nor negative\"\n    self._limit = _limit\n    return self\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Select.where","title":"where","text":"<pre><code>where(*predicates)\n</code></pre> <p>Adds WHERE conditions to the query.</p> <p>Parameters:</p> Name Type Description Default <code>*predicates</code> <code>ColumnExpr</code> <p>The column expressions to be used in the WHERE clause.</p> <code>()</code> <p>Returns:</p> Type Description <code>Select</code> <p>The updated Select query with WHERE conditions.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call\ndef where(self, *predicates: ColumnExpr) -&gt; Select:\n    \"\"\"Adds WHERE conditions to the query.\n\n    Parameters\n    ----------\n    *predicates : ColumnExpr\n        The column expressions to be used in the WHERE clause.\n\n    Returns\n    -------\n    Select\n        The updated Select query with WHERE conditions.\n    \"\"\"\n    assert len(predicates) &gt; 0, \"where condition cannot be empty!\"\n    assert all(\n        [\n            (predicate._table == self._table)\n            and (predicate._keyspace == self._keyspace)\n            for predicate in predicates\n        ]\n    ), \"Columns do not originate from the same table\"\n    self._where.extend(predicates)\n    return self\n</code></pre>"},{"location":"queries/#update","title":"Update","text":""},{"location":"queries/#scylla_bridge.query.Update","title":"scylla_bridge.query.Update","text":"<pre><code>Update(table)\n</code></pre> <p>               Bases: <code>Query</code></p> <p>Update query.</p> <p>Initializes the Update query.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Type[Table]</code> <p>The table to be updated.</p> required Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call(config=ConfigDict(arbitrary_types_allowed=True))\ndef __init__(self, table: Type[Table]):\n    \"\"\"Initializes the Update query.\n\n    Parameters\n    ----------\n    table : Type[Table]\n        The table to be updated.\n    \"\"\"\n    self._table = table\n    self._keyspace = table.__keyspace__\n    self._where: List[ColumnExpr] = []\n    self._set_values: Dict[Column, Any] = {}\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Update.build_query","title":"build_query","text":"<pre><code>build_query()\n</code></pre> <p>Builds the UPDATE query into a string and its parameters.</p> <p>Returns:</p> Type Description <code>Tuple[str, List[Any]]</code> <p>The query string and the corresponding parameters.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>def build_query(self) -&gt; Tuple[str, List[Any]]:\n    \"\"\"Builds the UPDATE query into a string and its parameters.\n\n    Returns\n    -------\n    Tuple[str, List[Any]]\n        The query string and the corresponding parameters.\n    \"\"\"\n    if not self._set_values:\n        raise ValueError(\"No SET in update query!\")\n\n    set_keys, parameters = [], []\n\n    for key, value in self._set_values.items():\n\n        set_keys.append(f\"{key._name} = ?\")\n        parameters.append(value)\n\n    set_values = \", \".join(set_keys)\n    query = f\"UPDATE {self._keyspace}.{self._table.__tablename__} SET {set_values}\"\n\n    if self._where:\n        predicates = []\n        for predicate in self._where:\n            predicates.append(f\"{predicate._name} {predicate.operator} ?\")\n            parameters.append(predicate.value)\n        query = f\"{query} WHERE {' AND '.join(predicates)}\"\n    return query, parameters\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Update.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(scylla_instance)\n</code></pre> <p>Executes the query using a Scylla instance.</p> <p>Parameters:</p> Name Type Description Default <code>scylla_instance</code> <code>Scylla</code> <p>The Scylla instance used to execute the query.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result of the executed query.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>async def execute(self, scylla_instance: Scylla) -&gt; Any:\n    \"\"\"Executes the query using a Scylla instance.\n\n    Parameters\n    ----------\n    scylla_instance : Scylla\n        The Scylla instance used to execute the query.\n\n    Returns\n    -------\n    Any\n        The result of the executed query.\n    \"\"\"\n    query, parameters = self.build_query()\n    result = await scylla_instance.execute(query, parameters)\n    return result\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Update.set","title":"set","text":"<pre><code>set(column, value)\n</code></pre> <p>Sets the values to be updated in the query.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>Column</code> <p>The column to update.</p> required <code>value</code> <code>Any</code> <p>The new value for the column.</p> required <p>Returns:</p> Type Description <code>Update</code> <p>The updated Update query with the new SET values.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call\ndef set(self, column: Column, value: Any) -&gt; Update:\n    \"\"\"Sets the values to be updated in the query.\n\n    Parameters\n    ----------\n    column : Column\n        The column to update.\n    value : Any\n        The new value for the column.\n\n    Returns\n    -------\n    Update\n        The updated Update query with the new SET values.\n    \"\"\"\n    self._set_values[column] = value\n    return self\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Update.where","title":"where","text":"<pre><code>where(*predicates)\n</code></pre> <p>Adds WHERE conditions to the update query.</p> <p>Parameters:</p> Name Type Description Default <code>*predicates</code> <code>ColumnExpr</code> <p>The column expressions to be used in the WHERE clause.</p> <code>()</code> <p>Returns:</p> Type Description <code>Update</code> <p>The updated Update query with WHERE conditions.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call\ndef where(self, *predicates: ColumnExpr) -&gt; Update:\n    \"\"\"Adds WHERE conditions to the update query.\n\n    Parameters\n    ----------\n    *predicates : ColumnExpr\n        The column expressions to be used in the WHERE clause.\n\n    Returns\n    -------\n    Update\n        The updated Update query with WHERE conditions.\n    \"\"\"\n    assert len(predicates) &gt; 0, \"where condition cannot be empty!\"\n    assert all(\n        [\n            (predicate._table == self._table)\n            and (predicate._keyspace == self._keyspace)\n            for predicate in predicates\n        ]\n    ), \"Columns do not originate from the same table\"\n    self._where.extend(predicates)\n    return self\n</code></pre>"},{"location":"queries/#delete","title":"Delete","text":""},{"location":"queries/#scylla_bridge.query.Delete","title":"scylla_bridge.query.Delete","text":"<pre><code>Delete(table)\n</code></pre> <p>               Bases: <code>Query</code></p> <p>Delete query.</p> <p>Initializes the Delete query.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Type[Table]</code> <p>The table from which records are to be deleted.</p> required Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call(config=ConfigDict(arbitrary_types_allowed=True))\ndef __init__(self, table: Type[Table]):\n    \"\"\"Initializes the Delete query.\n\n    Parameters\n    ----------\n    table : Type[Table]\n        The table from which records are to be deleted.\n    \"\"\"\n    self._table = table\n    self._keyspace = table.__keyspace__\n    self._where: List[ColumnExpr] = []\n    self._if_exists: bool = False\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Delete.build_query","title":"build_query","text":"<pre><code>build_query()\n</code></pre> <p>Builds the DELETE query into a string and its parameters.</p> <p>Returns:</p> Type Description <code>Tuple[str, List[Any]]</code> <p>The query string and the corresponding parameters.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>def build_query(self) -&gt; Tuple[str, List[Any]]:\n    \"\"\"Builds the DELETE query into a string and its parameters.\n\n    Returns\n    -------\n    Tuple[str, List[Any]]\n        The query string and the corresponding parameters.\n    \"\"\"\n    query = f\"DELETE FROM {self._keyspace}.{self._table.__tablename__}\"\n    parameters = []\n    if self._where:\n        predicates = []\n        for predicate in self._where:\n            predicates.append(f\"{predicate._name} {predicate.operator} ?\")\n            parameters.append(predicate.value)\n        query = f\"{query} WHERE {' AND '.join(predicates)}\"\n    if self._if_exists:\n        query = f\"{query} IF EXISTS\"\n    return query, parameters\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Delete.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(scylla_instance)\n</code></pre> <p>Executes the query using a Scylla instance.</p> <p>Parameters:</p> Name Type Description Default <code>scylla_instance</code> <code>Scylla</code> <p>The Scylla instance used to execute the query.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result of the executed query.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>async def execute(self, scylla_instance: Scylla) -&gt; Any:\n    \"\"\"Executes the query using a Scylla instance.\n\n    Parameters\n    ----------\n    scylla_instance : Scylla\n        The Scylla instance used to execute the query.\n\n    Returns\n    -------\n    Any\n        The result of the executed query.\n    \"\"\"\n    query, parameters = self.build_query()\n    result = await scylla_instance.execute(query, parameters)\n    return result\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Delete.if_exists","title":"if_exists","text":"<pre><code>if_exists()\n</code></pre> <p>Adds the IF EXISTS clause to the query.</p> <p>Returns:</p> Type Description <code>Delete</code> <p>The updated Delete query with IF EXISTS enabled.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>def if_exists(self) -&gt; Delete:\n    \"\"\"Adds the IF EXISTS clause to the query.\n\n    Returns\n    -------\n    Delete\n        The updated Delete query with IF EXISTS enabled.\n    \"\"\"\n    self._if_exists = True\n    return self\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Delete.where","title":"where","text":"<pre><code>where(*predicates)\n</code></pre> <p>Adds WHERE conditions to the delete query.</p> <p>Parameters:</p> Name Type Description Default <code>*predicates</code> <code>ColumnExpr</code> <p>The column expressions to be used in the WHERE clause.</p> <code>()</code> <p>Returns:</p> Type Description <code>Delete</code> <p>The updated Delete query with WHERE conditions.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call\ndef where(self, *predicates: ColumnExpr) -&gt; Delete:\n    \"\"\"Adds WHERE conditions to the delete query.\n\n    Parameters\n    ----------\n    *predicates : ColumnExpr\n        The column expressions to be used in the WHERE clause.\n\n    Returns\n    -------\n    Delete\n        The updated Delete query with WHERE conditions.\n    \"\"\"\n    assert len(predicates) &gt; 0, \"where condition cannot be empty!\"\n    assert all(\n        [\n            (predicate._table == self._table)\n            and (predicate._keyspace == self._keyspace)\n            for predicate in predicates\n        ]\n    ), \"Columns do not originate from the same table\"\n    self._where.extend(predicates)\n    return self\n</code></pre>"},{"location":"queries/#insert","title":"Insert","text":""},{"location":"queries/#scylla_bridge.query.Insert","title":"scylla_bridge.query.Insert","text":"<pre><code>Insert(table)\n</code></pre> <p>               Bases: <code>Query</code></p> <p>Insert query.</p> <p>Suboptimal way to insert, as the \"best way\" is to batch insert using directly <code>scyllaft</code>.</p> <p>Initializes the Insert query.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Type[Table]</code> <p>The table into which records are to be inserted.</p> required Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call(config=ConfigDict(arbitrary_types_allowed=True))\ndef __init__(self, table: Type[Table]):\n    \"\"\"Initializes the Insert query.\n\n    Parameters\n    ----------\n    table : Type[Table]\n        The table into which records are to be inserted.\n    \"\"\"\n    self._table = table\n    self._keyspace = table.__keyspace__\n    self._values: List[dict] = []\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Insert.build_query","title":"build_query","text":"<pre><code>build_query()\n</code></pre> <p>Builds the DELETE query into a string and its parameters.</p> <p>Returns:</p> Type Description <code>Tuple[str, List[Any]]</code> <p>The query string and the corresponding parameters.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>def build_query(self) -&gt; List[Tuple[str, List[Any]]]:  # type:ignore\n    \"\"\"Builds the DELETE query into a string and its parameters.\n\n    Returns\n    -------\n    Tuple[str, List[Any]]\n        The query string and the corresponding parameters.\n    \"\"\"\n    query = f\"INSERT INTO {self._keyspace}.{self._table.__tablename__}\"\n    queries = []\n    for stmt in self._values:\n        c, v = zip(*stmt.items())\n        queries.append(\n            (f\"{query} ({', '.join(c)}) VALUES ({', '.join(['?' for i in c])})\", v)\n        )\n    if not queries:\n        raise ValueError(\"No data to insert!\")\n    return queries\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Insert.execute","title":"execute  <code>async</code>","text":"<pre><code>execute(scylla_instance)\n</code></pre> <p>Executes the query using a Scylla instance.</p> <p>Parameters:</p> Name Type Description Default <code>scylla_instance</code> <code>Scylla</code> <p>The Scylla instance used to execute the query.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The result of the executed query.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>async def execute(self, scylla_instance: Scylla) -&gt; Any:\n    \"\"\"Executes the query using a Scylla instance.\n\n    Parameters\n    ----------\n    scylla_instance : Scylla\n        The Scylla instance used to execute the query.\n\n    Returns\n    -------\n    Any\n        The result of the executed query.\n    \"\"\"\n    queries = self.build_query()\n    result = []\n    for query, parameters in list(queries):\n        result.append(await scylla_instance.execute(query, parameters))\n    return result\n</code></pre>"},{"location":"queries/#scylla_bridge.query.Insert.values","title":"values","text":"<pre><code>values(*values)\n</code></pre> <p>Specifies the values to be inserted.</p> <p>Parameters:</p> Name Type Description Default <code>*values</code> <code>Table</code> <p>The values to be inserted into the table.</p> <code>()</code> <p>Returns:</p> Type Description <code>Insert</code> <p>The updated Insert query with values.</p> Source code in <code>scylla_bridge/query.py</code> <pre><code>@validate_call()\ndef values(self, *values: dict) -&gt; Insert:\n    \"\"\"Specifies the values to be inserted.\n\n    Parameters\n    ----------\n    *values : Table\n        The values to be inserted into the table.\n\n    Returns\n    -------\n    Insert\n        The updated Insert query with values.\n    \"\"\"\n    self._values.extend(values)\n    return self\n</code></pre>"},{"location":"tables/","title":"Table","text":""},{"location":"tables/#scylla_bridge.table.Table","title":"scylla_bridge.table.Table","text":"<p>Base table class for Scylla.</p> <p>Define attributes in a SQLAlchemy manner</p>"},{"location":"tables/#scylla_bridge.table.Table.fields","title":"fields  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fields = None\n</code></pre>"},{"location":"tables/#scylla_bridge.table.Table.get_view","title":"get_view  <code>classmethod</code>","text":"<pre><code>get_view(param)\n</code></pre> <p>Get access to a particular view like a table.</p> <p>Parameters:</p> Name Type Description Default <code>param</code> <code>str</code> <p>Key of the view.</p> required Source code in <code>scylla_bridge/table.py</code> <pre><code>@classmethod\ndef get_view(cls: Type[Table], param: str) -&gt; Type[Table]:\n    \"\"\"Get access to a particular view like a table.\n\n    Parameters\n    ----------\n    param: str\n        Key of the view.\n    \"\"\"\n    if param == cls.__base_level__:\n        return cls\n    if param not in cls.__materialized_views__.keys():\n        raise ValueError(\n            f\"Table {cls.__tablename__} does not have a view associated with {param}.\"\n        )\n    view = deepcopy(cls)\n    view.__tablename__ = f\"{cls.__tablename__}_{param}\"\n    view.__index__ = cls.__materialized_views__[param]\n    return view\n</code></pre>"},{"location":"tables/#scylla_bridge.table.Table.to_redis_schema","title":"to_redis_schema  <code>classmethod</code>","text":"<pre><code>to_redis_schema()\n</code></pre> <p>Map the class to a redis-schema.</p> Source code in <code>scylla_bridge/table.py</code> <pre><code>@classmethod\ndef to_redis_schema(cls: Type[Table]) -&gt; Dict[str, List[str]]:\n    \"\"\"Map the class to a redis-schema.\"\"\"\n    mappings = {\n        field_name: SCYLLA_TO_REDIS_MAP[col.type]\n        for field_name, col in cls.fields.items()\n    }\n    values = set(mappings.values())\n    schema = {\n        v: [key for key, value in mappings.items() if value == v] for v in values\n    }\n\n    return schema\n</code></pre>"},{"location":"tables/#types","title":"Types","text":""},{"location":"tables/#scylla_bridge.types.ScyllaType","title":"scylla_bridge.types.ScyllaType","text":"<p>               Bases: <code>StrEnum</code></p> <p>Enum defining all the ScyllaDB Types.</p>"},{"location":"tables/#scylla_bridge.types.ScyllaType.BIGINT","title":"BIGINT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BIGINT = 'BIGINT'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.BLOB","title":"BLOB  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLOB = 'BLOB'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.BOOLEAN","title":"BOOLEAN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOOLEAN = 'BOOLEAN'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.COUNTER","title":"COUNTER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COUNTER = 'COUNTER'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.DATE","title":"DATE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DATE = 'DATE'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.DECIMAL","title":"DECIMAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DECIMAL = 'DECIMAL'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.DOUBLE","title":"DOUBLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOUBLE = 'DOUBLE'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.DURATION","title":"DURATION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DURATION = 'DURATION'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.FLOAT","title":"FLOAT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FLOAT = 'FLOAT'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.INET","title":"INET  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INET = 'INET'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.INT","title":"INT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INT = 'INT'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.SMALLINT","title":"SMALLINT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SMALLINT = 'SMALLINT'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.TEXT","title":"TEXT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEXT = 'TEXT'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.TIME","title":"TIME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TIME = 'TIME'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.TIMESTAMP","title":"TIMESTAMP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TIMESTAMP = 'TIMESTAMP'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.TIMEUUID","title":"TIMEUUID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TIMEUUID = 'TIMEUUID'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.TINYINT","title":"TINYINT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TINYINT = 'TINYINT'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.UUID","title":"UUID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UUID = 'UUID'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.VARCHAR","title":"VARCHAR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VARCHAR = 'VARCHAR'\n</code></pre>"},{"location":"tables/#scylla_bridge.types.ScyllaType.VARINT","title":"VARINT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VARINT = 'VARINT'\n</code></pre>"}]}